"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7896],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,g=u["".concat(l,".").concat(d)]||u[d]||f[d]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},78029:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return f}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],s={id:"core_updateSelections_getOffsetsForEmptyRangeInsert",title:"Module: core/updateSelections/getOffsetsForEmptyRangeInsert",sidebar_label:"core/updateSelections/getOffsetsForEmptyRangeInsert",sidebar_position:0,custom_edit_url:null},l=void 0,p={unversionedId:"contributing/api/modules/core_updateSelections_getOffsetsForEmptyRangeInsert",id:"contributing/api/modules/core_updateSelections_getOffsetsForEmptyRangeInsert",title:"Module: core/updateSelections/getOffsetsForEmptyRangeInsert",description:"Functions",source:"@site/../docs/contributing/api/modules/core_updateSelections_getOffsetsForEmptyRangeInsert.md",sourceDirName:"contributing/api/modules",slug:"/contributing/api/modules/core_updateSelections_getOffsetsForEmptyRangeInsert",permalink:"/docs/contributing/api/modules/core_updateSelections_getOffsetsForEmptyRangeInsert",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"core_updateSelections_getOffsetsForEmptyRangeInsert",title:"Module: core/updateSelections/getOffsetsForEmptyRangeInsert",sidebar_label:"core/updateSelections/getOffsetsForEmptyRangeInsert",sidebar_position:0,custom_edit_url:null},sidebar:"contributing",previous:{title:"core/updateSelections/getOffsetsForDeleteOrReplace",permalink:"/docs/contributing/api/modules/core_updateSelections_getOffsetsForDeleteOrReplace"},next:{title:"core/updateSelections/getOffsetsForNonEmptyRangeInsert",permalink:"/docs/contributing/api/modules/core_updateSelections_getOffsetsForNonEmptyRangeInsert"}},c={},f=[{value:"Functions",id:"functions",level:2},{value:"getOffsetsForEmptyRangeInsert",id:"getoffsetsforemptyrangeinsert",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4}],u={toc:f};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"getoffsetsforemptyrangeinsert"},"getOffsetsForEmptyRangeInsert"),(0,o.kt)("p",null,"\u25b8 ",(0,o.kt)("strong",{parentName:"p"},"getOffsetsForEmptyRangeInsert"),"(",(0,o.kt)("inlineCode",{parentName:"p"},"changeEventInfo"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"rangeInfo"),"): ",(0,o.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/typings_updateSelections.RangeOffsets"},(0,o.kt)("inlineCode",{parentName:"a"},"RangeOffsets"))),(0,o.kt)("p",null,"Gets updated offsets for the range ",(0,o.kt)("inlineCode",{parentName:"p"},"rangeInfo")," after the change described by\n",(0,o.kt)("inlineCode",{parentName:"p"},"changeEventInfo"),".  This function will only be called if the following hold:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the change is an insert event, ie a change event for which the\noriginal range is empty, and"),(0,o.kt)("li",{parentName:"ul"},"the range to be updated is empty, and"),(0,o.kt)("li",{parentName:"ul"},"the insertion position is equal to the position of the empty range to be\nupdated.")),(0,o.kt)("p",null,"The approach taken here is to first look at the ",(0,o.kt)("inlineCode",{parentName:"p"},"isReplace")," field of the\nchange to determine whether it should shift empty ranges to the right.  If\nit shifts them to the right, we then look at its left / start expansion\nbehaviour.  If does not shift empty ranges, then we look at its right / end\nexpansion behaviour."),(0,o.kt)("p",null,'If the given expansion behaviour is "open", we expand to contain the new\ntext, if "closed" we do not expand, and if "regex", we expand to contain as\nmuch of the inserted text as matches the given regex, anchored at the\nopposite end.'),(0,o.kt)("h4",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"changeEventInfo")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/typings_updateSelections.ChangeEventInfo"},(0,o.kt)("inlineCode",{parentName:"a"},"ChangeEventInfo"))),(0,o.kt)("td",{parentName:"tr",align:"left"},"Information about the change that occurred")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"rangeInfo")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/typings_updateSelections.FullRangeInfo"},(0,o.kt)("inlineCode",{parentName:"a"},"FullRangeInfo"))),(0,o.kt)("td",{parentName:"tr",align:"left"},"The range to compute new offsets for")))),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/typings_updateSelections.RangeOffsets"},(0,o.kt)("inlineCode",{parentName:"a"},"RangeOffsets"))),(0,o.kt)("p",null,"The new offsets for the given range"),(0,o.kt)("h4",{id:"defined-in"},"Defined in"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/cursorless-dev/cursorless/blob/3a9fc42/src/core/updateSelections/getOffsetsForEmptyRangeInsert.ts#L34"},"src/core/updateSelections/getOffsetsForEmptyRangeInsert.ts:34")))}d.isMDXComponent=!0}}]);