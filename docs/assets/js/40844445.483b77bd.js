"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[80254],{3905:function(e,r,t){t.d(r,{Zo:function(){return l},kt:function(){return f}});var n=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=n.createContext({}),u=function(e){var r=n.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},l=function(e){var r=u(e.components);return n.createElement(d.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=u(t),f=i,m=c["".concat(d,".").concat(f)]||c[f]||p[f]||a;return t?n.createElement(m,o(o({ref:r},l),{},{components:t})):n.createElement(m,o({ref:r},l))}));function f(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=c;var s={};for(var d in r)hasOwnProperty.call(r,d)&&(s[d]=r[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},85531:function(e,r,t){t.r(r),t.d(r,{assets:function(){return l},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var n=t(87462),i=t(63366),a=(t(67294),t(3905)),o=["components"],s={id:"processTargets_modifiers_surroundingPair_findSurroundingPairCore",title:"Module: processTargets/modifiers/surroundingPair/findSurroundingPairCore",sidebar_label:"processTargets/modifiers/surroundingPair/findSurroundingPairCore",sidebar_position:0,custom_edit_url:null},d=void 0,u={unversionedId:"contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairCore",id:"contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairCore",title:"Module: processTargets/modifiers/surroundingPair/findSurroundingPairCore",description:"Functions",source:"@site/../docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairCore.md",sourceDirName:"contributing/api/modules",slug:"/contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairCore",permalink:"/docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairCore",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"processTargets_modifiers_surroundingPair_findSurroundingPairCore",title:"Module: processTargets/modifiers/surroundingPair/findSurroundingPairCore",sidebar_label:"processTargets/modifiers/surroundingPair/findSurroundingPairCore",sidebar_position:0,custom_edit_url:null},sidebar:"contributing",previous:{title:"processTargets/modifiers/surroundingPair/findOppositeDelimiter",permalink:"/docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findOppositeDelimiter"},next:{title:"processTargets/modifiers/surroundingPair/findSurroundingPairParseTreeBased",permalink:"/docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairParseTreeBased"}},l={},p=[{value:"Functions",id:"functions",level:2},{value:"findSurroundingPairCore",id:"findsurroundingpaircore",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4}],c={toc:p};function f(e){var r=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"findsurroundingpaircore"},"findSurroundingPairCore"),(0,a.kt)("p",null,"\u25b8 ",(0,a.kt)("strong",{parentName:"p"},"findSurroundingPairCore"),"(",(0,a.kt)("inlineCode",{parentName:"p"},"scopeType"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"delimiterOccurrences"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"acceptableDelimiters"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"selectionOffsets"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"bailOnUnmatchedAdjacent?"),"): ",(0,a.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/processTargets_modifiers_surroundingPair_types.SurroundingPairOffsets"},(0,a.kt)("inlineCode",{parentName:"a"},"SurroundingPairOffsets"))," ","|"," ",(0,a.kt)("inlineCode",{parentName:"p"},"null")),(0,a.kt)("p",null,"This function implements the core high-level surrounding pair algorithm\nshared by both the parse tree and textual implementations."),(0,a.kt)("p",null,"We first look for any delimiter pair where one of the delimiters itself\ncontains our selection, for example if the user refers to a mark which is a\ndelimiter token, or if the user's cursor is right next to a delimiter."),(0,a.kt)("p",null,"If we don't find a delimiter pair that way, we instead look for the smallest\ndelimiter pair that contains the selection."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"scopeType")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/typings_targetDescriptor_types.SurroundingPairScopeType"},(0,a.kt)("inlineCode",{parentName:"a"},"SurroundingPairScopeType"))),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"delimiterOccurrences")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/processTargets_modifiers_surroundingPair_types.PossibleDelimiterOccurrence"},(0,a.kt)("inlineCode",{parentName:"a"},"PossibleDelimiterOccurrence")),"[]"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"A list of delimiter occurrences.  Expected to be sorted by offsets")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"acceptableDelimiters")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/modules/typings_targetDescriptor_types#simplesurroundingpairname"},(0,a.kt)("inlineCode",{parentName:"a"},"SimpleSurroundingPairName")),"[]"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"A list of names of acceptable delimiters to look for")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"selectionOffsets")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/processTargets_modifiers_surroundingPair_types.Offsets"},(0,a.kt)("inlineCode",{parentName:"a"},"Offsets"))),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The offsets of the selection")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"bailOnUnmatchedAdjacent")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"false")),(0,a.kt)("td",{parentName:"tr",align:"left"},"If ",(0,a.kt)("inlineCode",{parentName:"td"},"true"),", immediately return null if we find an adjacent delimiter that we can't find a match for.  This variable will be true if the current iteration can't see the full document.  In that case, we'd like to fail and let a subsequent pass try again in case the matching delimiter is outside the range we're looking.")))),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/processTargets_modifiers_surroundingPair_types.SurroundingPairOffsets"},(0,a.kt)("inlineCode",{parentName:"a"},"SurroundingPairOffsets"))," ","|"," ",(0,a.kt)("inlineCode",{parentName:"p"},"null")),(0,a.kt)("h4",{id:"defined-in"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/cursorless-dev/cursorless/blob/f8a3fc3/src/processTargets/modifiers/surroundingPair/findSurroundingPairCore.ts#L35"},"src/processTargets/modifiers/surroundingPair/findSurroundingPairCore.ts:35")))}f.isMDXComponent=!0}}]);