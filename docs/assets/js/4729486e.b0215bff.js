"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4149],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var i=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=i.createContext({}),d=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(r),m=n,f=c["".concat(l,".").concat(m)]||c[m]||u[m]||o;return r?i.createElement(f,a(a({ref:t},p),{},{components:r})):i.createElement(f,a({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,a[1]=s;for(var d=2;d<o;d++)a[d]=r[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}c.displayName="MDXCreateElement"},35288:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var i=r(87462),n=r(63366),o=(r(67294),r(3905)),a=["components"],s={id:"processTargets_modifiers_surroundingPair_findOppositeDelimiter",title:"Module: processTargets/modifiers/surroundingPair/findOppositeDelimiter",sidebar_label:"processTargets/modifiers/surroundingPair/findOppositeDelimiter",sidebar_position:0,custom_edit_url:null},l=void 0,d={unversionedId:"contributing/api/modules/processTargets_modifiers_surroundingPair_findOppositeDelimiter",id:"contributing/api/modules/processTargets_modifiers_surroundingPair_findOppositeDelimiter",title:"Module: processTargets/modifiers/surroundingPair/findOppositeDelimiter",description:"Functions",source:"@site/../docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findOppositeDelimiter.md",sourceDirName:"contributing/api/modules",slug:"/contributing/api/modules/processTargets_modifiers_surroundingPair_findOppositeDelimiter",permalink:"/docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findOppositeDelimiter",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"processTargets_modifiers_surroundingPair_findOppositeDelimiter",title:"Module: processTargets/modifiers/surroundingPair/findOppositeDelimiter",sidebar_label:"processTargets/modifiers/surroundingPair/findOppositeDelimiter",sidebar_position:0,custom_edit_url:null},sidebar:"contributing",previous:{title:"processTargets/modifiers/surroundingPair/findDelimiterPairContainingSelection",permalink:"/docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findDelimiterPairContainingSelection"},next:{title:"processTargets/modifiers/surroundingPair/findSurroundingPairCore",permalink:"/docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairCore"}},p={},u=[{value:"Functions",id:"functions",level:2},{value:"findOppositeDelimiter",id:"findoppositedelimiter",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4}],c={toc:u};function m(e){var t=e.components,r=(0,n.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"findoppositedelimiter"},"findOppositeDelimiter"),(0,o.kt)("p",null,"\u25b8 ",(0,o.kt)("strong",{parentName:"p"},"findOppositeDelimiter"),"(",(0,o.kt)("inlineCode",{parentName:"p"},"delimiterOccurrences"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"index"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"delimiterInfo"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"forceDirection"),"): ",(0,o.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/processTargets_modifiers_surroundingPair_types.DelimiterOccurrence"},(0,o.kt)("inlineCode",{parentName:"a"},"DelimiterOccurrence"))," ","|"," ",(0,o.kt)("inlineCode",{parentName:"p"},"null")),(0,o.kt)("p",null,"Given a delimiter, scans in the appropriate direction for a matching\nopposite delimiter.  If we don't know which direction the delimiter is facing\n(eg for a ",(0,o.kt)("inlineCode",{parentName:"p"},'"'),"), we first scan right, then left if nothing is found to the\nright.  This algorithm will get confused in text files, but keep in mind\nthat for languages with a parse tree, the delimiter occurrence will usually\nknow which direction it is based on where it sits in the parse tree.  That\ninformation will be reflected on the ",(0,o.kt)("inlineCode",{parentName:"p"},"IndividualDelimiter")," itself."),(0,o.kt)("h4",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"delimiterOccurrences")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/processTargets_modifiers_surroundingPair_types.PossibleDelimiterOccurrence"},(0,o.kt)("inlineCode",{parentName:"a"},"PossibleDelimiterOccurrence")),"[]"),(0,o.kt)("td",{parentName:"tr",align:"left"},"A list of delimiter occurrences.  Expected to be sorted by offsets")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"index")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"number")),(0,o.kt)("td",{parentName:"tr",align:"left"},"The index of the delimiter whose opposite we're looking for")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"delimiterInfo")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/processTargets_modifiers_surroundingPair_types.IndividualDelimiter"},(0,o.kt)("inlineCode",{parentName:"a"},"IndividualDelimiter"))),(0,o.kt)("td",{parentName:"tr",align:"left"},"The delimiter info for the delimiter occurrence at the given index.  Just passed through for efficiency rather than having to look it up again.  Equivalent to ",(0,o.kt)("inlineCode",{parentName:"td"},"delimiterOccurrences[index].delimiterInfo"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"forceDirection")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},'"left"')," ","|"," ",(0,o.kt)("inlineCode",{parentName:"td"},'"right"')),(0,o.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/processTargets_modifiers_surroundingPair_types.DelimiterOccurrence"},(0,o.kt)("inlineCode",{parentName:"a"},"DelimiterOccurrence"))," ","|"," ",(0,o.kt)("inlineCode",{parentName:"p"},"null")),(0,o.kt)("p",null,"The opposite delimiter, if found; otherwise ",(0,o.kt)("inlineCode",{parentName:"p"},"null")),(0,o.kt)("h4",{id:"defined-in"},"Defined in"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/cursorless-dev/cursorless/blob/b0837f1/src/processTargets/modifiers/surroundingPair/findOppositeDelimiter.ts#L26"},"src/processTargets/modifiers/surroundingPair/findOppositeDelimiter.ts:26")))}m.isMDXComponent=!0}}]);