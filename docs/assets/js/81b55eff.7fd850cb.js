"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[24598],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,g=u["".concat(s,".").concat(d)]||u[d]||f[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},98101:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return f}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={id:"core_updateSelections_getOffsetsForDeleteOrReplace",title:"Module: core/updateSelections/getOffsetsForDeleteOrReplace",sidebar_label:"core/updateSelections/getOffsetsForDeleteOrReplace",sidebar_position:0,custom_edit_url:null},s=void 0,c={unversionedId:"contributing/api/modules/core_updateSelections_getOffsetsForDeleteOrReplace",id:"contributing/api/modules/core_updateSelections_getOffsetsForDeleteOrReplace",title:"Module: core/updateSelections/getOffsetsForDeleteOrReplace",description:"Functions",source:"@site/../docs/contributing/api/modules/core_updateSelections_getOffsetsForDeleteOrReplace.md",sourceDirName:"contributing/api/modules",slug:"/contributing/api/modules/core_updateSelections_getOffsetsForDeleteOrReplace",permalink:"/docs/contributing/api/modules/core_updateSelections_getOffsetsForDeleteOrReplace",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"core_updateSelections_getOffsetsForDeleteOrReplace",title:"Module: core/updateSelections/getOffsetsForDeleteOrReplace",sidebar_label:"core/updateSelections/getOffsetsForDeleteOrReplace",sidebar_position:0,custom_edit_url:null},sidebar:"contributing",previous:{title:"core/updateSelections/RangeUpdater",permalink:"/docs/contributing/api/modules/core_updateSelections_RangeUpdater"},next:{title:"core/updateSelections/getOffsetsForEmptyRangeInsert",permalink:"/docs/contributing/api/modules/core_updateSelections_getOffsetsForEmptyRangeInsert"}},p={},f=[{value:"Functions",id:"functions",level:2},{value:"getOffsetsForDeleteOrReplace",id:"getoffsetsfordeleteorreplace",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4}],u={toc:f};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"getoffsetsfordeleteorreplace"},"getOffsetsForDeleteOrReplace"),(0,o.kt)("p",null,"\u25b8 ",(0,o.kt)("strong",{parentName:"p"},"getOffsetsForDeleteOrReplace"),"(",(0,o.kt)("inlineCode",{parentName:"p"},"changeEventInfo"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"rangeInfo"),"): ",(0,o.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/typings_updateSelections.RangeOffsets"},(0,o.kt)("inlineCode",{parentName:"a"},"RangeOffsets"))),(0,o.kt)("p",null,"Gets updated offsets for the range ",(0,o.kt)("inlineCode",{parentName:"p"},"rangeInfo")," after the change described by\n",(0,o.kt)("inlineCode",{parentName:"p"},"changeEventInfo"),".  This function will only be called if the following hold:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the change is a delete or replace event, ie a change event for which the\noriginal range is nonempty, and"),(0,o.kt)("li",{parentName:"ul"},"the change's original range overlaps with or is directly adjacent to the\nrange to be updated.")),(0,o.kt)("p",null,"There are many ways one might handle replaces and deletes.  We opt for a\nrelatively simple approach.  We attempt to keep both the start and end\noffsets as close as possible to what they were prior to the change.  We\nhandle start and end offsets independently.  For each edge (start or end),\nwe move it to the left only if it was contained in the original range, and\nit will now be to the right of the new range.  We just clamp it so that\nit will match the end of the new change range in that case."),(0,o.kt)("h4",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"changeEventInfo")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/typings_updateSelections.ChangeEventInfo"},(0,o.kt)("inlineCode",{parentName:"a"},"ChangeEventInfo"))),(0,o.kt)("td",{parentName:"tr",align:"left"},"Information about the change that occurred")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"rangeInfo")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/typings_updateSelections.FullRangeInfo"},(0,o.kt)("inlineCode",{parentName:"a"},"FullRangeInfo"))),(0,o.kt)("td",{parentName:"tr",align:"left"},"The range to compute new offsets for")))),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/typings_updateSelections.RangeOffsets"},(0,o.kt)("inlineCode",{parentName:"a"},"RangeOffsets"))),(0,o.kt)("p",null,"The new offsets for the given range"),(0,o.kt)("h4",{id:"defined-in"},"Defined in"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/cursorless-dev/cursorless/blob/f8a3fc3/src/core/updateSelections/getOffsetsForDeleteOrReplace.ts#L29"},"src/core/updateSelections/getOffsetsForDeleteOrReplace.ts:29")))}d.isMDXComponent=!0}}]);