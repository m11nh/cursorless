"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[35618],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,g=u["".concat(l,".").concat(d)]||u[d]||f[d]||a;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},11690:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return f}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],s={id:"core_updateSelections_getOffsetsForNonEmptyRangeInsert",title:"Module: core/updateSelections/getOffsetsForNonEmptyRangeInsert",sidebar_label:"core/updateSelections/getOffsetsForNonEmptyRangeInsert",sidebar_position:0,custom_edit_url:null},l=void 0,p={unversionedId:"contributing/api/modules/core_updateSelections_getOffsetsForNonEmptyRangeInsert",id:"contributing/api/modules/core_updateSelections_getOffsetsForNonEmptyRangeInsert",title:"Module: core/updateSelections/getOffsetsForNonEmptyRangeInsert",description:"Functions",source:"@site/../docs/contributing/api/modules/core_updateSelections_getOffsetsForNonEmptyRangeInsert.md",sourceDirName:"contributing/api/modules",slug:"/contributing/api/modules/core_updateSelections_getOffsetsForNonEmptyRangeInsert",permalink:"/docs/contributing/api/modules/core_updateSelections_getOffsetsForNonEmptyRangeInsert",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"core_updateSelections_getOffsetsForNonEmptyRangeInsert",title:"Module: core/updateSelections/getOffsetsForNonEmptyRangeInsert",sidebar_label:"core/updateSelections/getOffsetsForNonEmptyRangeInsert",sidebar_position:0,custom_edit_url:null},sidebar:"contributing",previous:{title:"core/updateSelections/getOffsetsForEmptyRangeInsert",permalink:"/docs/contributing/api/modules/core_updateSelections_getOffsetsForEmptyRangeInsert"},next:{title:"core/updateSelections/getUpdatedText",permalink:"/docs/contributing/api/modules/core_updateSelections_getUpdatedText"}},c={},f=[{value:"Functions",id:"functions",level:2},{value:"getOffsetsForNonEmptyRangeInsert",id:"getoffsetsfornonemptyrangeinsert",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4}],u={toc:f};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"getoffsetsfornonemptyrangeinsert"},"getOffsetsForNonEmptyRangeInsert"),(0,a.kt)("p",null,"\u25b8 ",(0,a.kt)("strong",{parentName:"p"},"getOffsetsForNonEmptyRangeInsert"),"(",(0,a.kt)("inlineCode",{parentName:"p"},"changeEventInfo"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"rangeInfo"),"): ",(0,a.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/typings_updateSelections.RangeOffsets"},(0,a.kt)("inlineCode",{parentName:"a"},"RangeOffsets"))),(0,a.kt)("p",null,"Gets updated offsets for the range ",(0,a.kt)("inlineCode",{parentName:"p"},"rangeInfo")," after the change described by\n",(0,a.kt)("inlineCode",{parentName:"p"},"changeEventInfo"),".  This function will only be called if the following hold:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the change is an insert event, ie a change event for which the\noriginal range is empty,"),(0,a.kt)("li",{parentName:"ul"},"the range to be updated is nonempty, and"),(0,a.kt)("li",{parentName:"ul"},"the insertion position is non-strictly contained by the range to be\nupdated, ie inside the range or at its start or end.")),(0,a.kt)("p",null,"The approach taken here is to leave the selection unchanged in the case of\ninternal insertions (ie insertion position is strictly greater than start\nand strictly less than end).  In that case, we just update the position of\nthe range end position to take into account the shift from the insertion."),(0,a.kt)("p",null,"In the case of insertions that are at the beginning or end of the range, we\nlook at the ",(0,a.kt)("inlineCode",{parentName:"p"},"expansionBehavior"),' of the given end of the range.  If it is\n"open", we expand to contain the new text, if "closed" we do not expand,\nand if "regex" we anchor the regex at the other end of the range and see\nhow far it extends into the newly inserted text.'),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"changeEventInfo")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/typings_updateSelections.ChangeEventInfo"},(0,a.kt)("inlineCode",{parentName:"a"},"ChangeEventInfo"))),(0,a.kt)("td",{parentName:"tr",align:"left"},"Information about the change that occurred")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"rangeInfo")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/typings_updateSelections.FullRangeInfo"},(0,a.kt)("inlineCode",{parentName:"a"},"FullRangeInfo"))),(0,a.kt)("td",{parentName:"tr",align:"left"},"The range to compute new offsets for")))),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/typings_updateSelections.RangeOffsets"},(0,a.kt)("inlineCode",{parentName:"a"},"RangeOffsets"))),(0,a.kt)("p",null,"The new offsets for the given range"),(0,a.kt)("h4",{id:"defined-in"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/cursorless-dev/cursorless/blob/585f15c/src/core/updateSelections/getOffsetsForNonEmptyRangeInsert.ts#L34"},"src/core/updateSelections/getOffsetsForNonEmptyRangeInsert.ts:34")))}d.isMDXComponent=!0}}]);