"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[15402],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=i.createContext({}),s=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,f=c["".concat(o,".").concat(m)]||c[m]||u[m]||a;return n?i.createElement(f,p(p({ref:t},d),{},{components:n})):i.createElement(f,p({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,p=new Array(a);p[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,p[1]=l;for(var s=2;s<a;s++)p[s]=n[s];return i.createElement.apply(null,p)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85142:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),p=["components"],l={id:"util_snippet",title:"Module: util/snippet",sidebar_label:"util/snippet",sidebar_position:0,custom_edit_url:null},o=void 0,s={unversionedId:"contributing/api/modules/util_snippet",id:"contributing/api/modules/util_snippet",title:"Module: util/snippet",description:"Functions",source:"@site/../docs/contributing/api/modules/util_snippet.md",sourceDirName:"contributing/api/modules",slug:"/contributing/api/modules/util_snippet",permalink:"/docs/contributing/api/modules/util_snippet",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"util_snippet",title:"Module: util/snippet",sidebar_label:"util/snippet",sidebar_position:0,custom_edit_url:null},sidebar:"contributing",previous:{title:"util/sleep",permalink:"/docs/contributing/api/modules/util_sleep"},next:{title:"util/targetUtils",permalink:"/docs/contributing/api/modules/util_targetUtils"}},d={},u=[{value:"Functions",id:"functions",level:2},{value:"findMatchingSnippetDefinitionStrict",id:"findmatchingsnippetdefinitionstrict",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"transformSnippetVariables",id:"transformsnippetvariables",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4}],c={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,p);return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"findmatchingsnippetdefinitionstrict"},"findMatchingSnippetDefinitionStrict"),(0,a.kt)("p",null,"\u25b8 ",(0,a.kt)("strong",{parentName:"p"},"findMatchingSnippetDefinitionStrict"),"(",(0,a.kt)("inlineCode",{parentName:"p"},"targets"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"definitions"),"): ",(0,a.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/typings_snippet.SnippetDefinition"},(0,a.kt)("inlineCode",{parentName:"a"},"SnippetDefinition"))),(0,a.kt)("p",null,"Based on the context determined by  {@link targets} (eg the file's language\nid and containing scope), finds the first snippet definition that matches the\ngiven context. Throws an error if different snippet definitions match for\ndifferent targets or if matching snippet definition could not be found"),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"targets")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/typings_target_types.Target"},(0,a.kt)("inlineCode",{parentName:"a"},"Target")),"[]"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The target that defines the context to use for finding the right snippet definition")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"definitions")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/typings_snippet.SnippetDefinition"},(0,a.kt)("inlineCode",{parentName:"a"},"SnippetDefinition")),"[]"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The list of snippet definitions to search")))),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/typings_snippet.SnippetDefinition"},(0,a.kt)("inlineCode",{parentName:"a"},"SnippetDefinition"))),(0,a.kt)("p",null,"The snippet definition that matches the given context"),(0,a.kt)("h4",{id:"defined-in"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/cursorless-dev/cursorless/blob/ed5840d/src/util/snippet.ts#L86"},"src/util/snippet.ts:86")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"transformsnippetvariables"},"transformSnippetVariables"),(0,a.kt)("p",null,"\u25b8 ",(0,a.kt)("strong",{parentName:"p"},"transformSnippetVariables"),"(",(0,a.kt)("inlineCode",{parentName:"p"},"parsedSnippet"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"placeholderName?"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"substitutions?"),"): ",(0,a.kt)("inlineCode",{parentName:"p"},"void")),(0,a.kt)("p",null,"Replaces the snippet variable with name ",(0,a.kt)("inlineCode",{parentName:"p"},"placeholderName")," with\nTM_SELECTED_TEXT"),(0,a.kt)("p",null,"Also replaces any unknown variables with placeholders. We do this so it's\neasier to leave one of the placeholders blank. We may make it so that you can\ndisable this with a setting in the future"),(0,a.kt)("h4",{id:"parameters-1"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"parsedSnippet")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/classes/vendor_snippet_snippetParser.TextmateSnippet"},(0,a.kt)("inlineCode",{parentName:"a"},"TextmateSnippet"))),(0,a.kt)("td",{parentName:"tr",align:"left"},"The parsed textmate snippet to operate on")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"placeholderName?")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The variable name to replace with TM_SELECTED_TEXT")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"substitutions?")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/namespaces/actions_InsertSnippet.internal#record"},(0,a.kt)("inlineCode",{parentName:"a"},"Record")),"<",(0,a.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"string"),">"),(0,a.kt)("td",{parentName:"tr",align:"left"},"A map from variable names to text values that will be substituted and the given variable will no longer be a placeholder in the final snippet")))),(0,a.kt)("h4",{id:"returns-1"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"void")),(0,a.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/cursorless-dev/cursorless/blob/ed5840d/src/util/snippet.ts#L24"},"src/util/snippet.ts:24")))}m.isMDXComponent=!0}}]);