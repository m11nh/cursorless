"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[15642],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),u=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=u(n),g=i,m=c["".concat(d,".").concat(g)]||c[g]||p[g]||a;return n?r.createElement(m,o(o({ref:t},l),{},{components:n})):r.createElement(m,o({ref:t},l))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},58977:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],s={id:"processTargets_modifiers_surroundingPair_findSurroundingPairTextBased",title:"Module: processTargets/modifiers/surroundingPair/findSurroundingPairTextBased",sidebar_label:"processTargets/modifiers/surroundingPair/findSurroundingPairTextBased",sidebar_position:0,custom_edit_url:null},d=void 0,u={unversionedId:"contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairTextBased",id:"contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairTextBased",title:"Module: processTargets/modifiers/surroundingPair/findSurroundingPairTextBased",description:"Functions",source:"@site/../docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairTextBased.md",sourceDirName:"contributing/api/modules",slug:"/contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairTextBased",permalink:"/docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairTextBased",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"processTargets_modifiers_surroundingPair_findSurroundingPairTextBased",title:"Module: processTargets/modifiers/surroundingPair/findSurroundingPairTextBased",sidebar_label:"processTargets/modifiers/surroundingPair/findSurroundingPairTextBased",sidebar_position:0,custom_edit_url:null},sidebar:"contributing",previous:{title:"processTargets/modifiers/surroundingPair/findSurroundingPairParseTreeBased",permalink:"/docs/contributing/api/modules/processTargets_modifiers_surroundingPair_findSurroundingPairParseTreeBased"},next:{title:"processTargets/modifiers/surroundingPair/generateUnmatchedDelimiters",permalink:"/docs/contributing/api/modules/processTargets_modifiers_surroundingPair_generateUnmatchedDelimiters"}},l={},p=[{value:"Functions",id:"functions",level:2},{value:"findSurroundingPairTextBased",id:"findsurroundingpairtextbased",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4}],c={toc:p};function g(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"findsurroundingpairtextbased"},"findSurroundingPairTextBased"),(0,a.kt)("p",null,"\u25b8 ",(0,a.kt)("strong",{parentName:"p"},"findSurroundingPairTextBased"),"(",(0,a.kt)("inlineCode",{parentName:"p"},"editor"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"range"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"allowableRange"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"delimiters"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"forceDirection"),"): ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,a.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/processTargets_modifiers_surroundingPair_extractSelectionFromSurroundingPairOffsets.SurroundingPairInfo"},(0,a.kt)("inlineCode",{parentName:"a"},"SurroundingPairInfo"))),(0,a.kt)("p",null,"Implements the version of the surrounding pair finding algorithm that\njust looks at text.  We use this algorithm when we are in a language\nfor which we do not have parser support, or if we have parse tree support\nbut the selection is in a string or comment."),(0,a.kt)("p",null,"The approach is to create a list of candidate delimiters in the given range,\nand then pass them to the core algorithm, implemented by\nfindSurroundingPairCore."),(0,a.kt)("p",null,"To generate a list of delimiters to pass to findSurroundingPairCore, we\nrun a regex on the entire range to find all delimiter texts, using a\nnegative lookbehind to ensure they're not preceded by ",(0,a.kt)("inlineCode",{parentName:"p"},"\\"),"."),(0,a.kt)("p",null,"The main drawbacks of the text-based approach are the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We can get confused by delimiters whose opening and closing symbol is the\nsame (eg ",(0,a.kt)("inlineCode",{parentName:"li"},'"'),").  Without a parse tree we have to guess whether it is an\nopening or closing quote."),(0,a.kt)("li",{parentName:"ul"},"We need to parse the whole range  from the start because otherwise it is\ndifficult to handle the case where one delimiter text is a subset of\nanother, eg ",(0,a.kt)("inlineCode",{parentName:"li"},'"')," and ",(0,a.kt)("inlineCode",{parentName:"li"},'\\"'),".  We could handle this another way if performance\nbecomes a bottleneck."),(0,a.kt)("li",{parentName:"ul"},"We cannot understand special features of a language, eg that ",(0,a.kt)("inlineCode",{parentName:"li"},'f"')," is a\nform of opening quote in Python.")),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"editor")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/interfaces/actions_BringMoveSwap.internal.TextEditor"},(0,a.kt)("inlineCode",{parentName:"a"},"TextEditor"))),(0,a.kt)("td",{parentName:"tr",align:"left"},"The text editor containing the selection")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"range")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/classes/actions_BringMoveSwap.internal.Range"},(0,a.kt)("inlineCode",{parentName:"a"},"Range"))),(0,a.kt)("td",{parentName:"tr",align:"left"},"The selection to find surrounding pair around")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"allowableRange")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/classes/actions_BringMoveSwap.internal.Range"},(0,a.kt)("inlineCode",{parentName:"a"},"Range"))),(0,a.kt)("td",{parentName:"tr",align:"left"},"The range in which to look for delimiters, or the entire document if ",(0,a.kt)("inlineCode",{parentName:"td"},"null"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"delimiters")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/contributing/api/modules/typings_targetDescriptor_types#simplesurroundingpairname"},(0,a.kt)("inlineCode",{parentName:"a"},"SimpleSurroundingPairName")),"[]"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The acceptable surrounding pair names")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"forceDirection")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"left"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"right"')),(0,a.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,a.kt)("a",{parentName:"p",href:"/docs/contributing/api/interfaces/processTargets_modifiers_surroundingPair_extractSelectionFromSurroundingPairOffsets.SurroundingPairInfo"},(0,a.kt)("inlineCode",{parentName:"a"},"SurroundingPairInfo"))),(0,a.kt)("p",null,"The newly expanded selection, including editor info"),(0,a.kt)("h4",{id:"defined-in"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/cursorless-dev/cursorless/blob/603dbd0/src/processTargets/modifiers/surroundingPair/findSurroundingPairTextBased.ts#L68"},"src/processTargets/modifiers/surroundingPair/findSurroundingPairTextBased.ts:68")))}g.isMDXComponent=!0}}]);